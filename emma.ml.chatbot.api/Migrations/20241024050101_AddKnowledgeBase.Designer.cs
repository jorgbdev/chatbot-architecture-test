// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using emma.ml.chatbot.api.Database;

#nullable disable

namespace emma.ml.chatbot.api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241024050101_AddKnowledgeBase")]
    partial class AddKnowledgeBase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("emma.ml.chatbot.api.Entities.Chat.Conversation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("CurrentRepresentativeId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("CurrentRepresentativeId");

                    b.ToTable("Conversations", (string)null);
                });

            modelBuilder.Entity("emma.ml.chatbot.api.Entities.Chat.ConversationParticipant", b =>
                {
                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uuid");

                    b.Property<int>("ParticipantId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("JoinedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("LeftAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("ConversationId", "ParticipantId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("ConversationParticipants", (string)null);
                });

            modelBuilder.Entity("emma.ml.chatbot.api.Entities.Chat.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uuid");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ParticipantId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("Messages", (string)null);
                });

            modelBuilder.Entity("emma.ml.chatbot.api.Entities.Chat.Participant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Participants", (string)null);
                });

            modelBuilder.Entity("emma.ml.chatbot.api.Entities.KnowledgeBase.Entry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("TopicId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TopicId", "Key")
                        .IsUnique();

                    b.ToTable("Entries", (string)null);
                });

            modelBuilder.Entity("emma.ml.chatbot.api.Entities.KnowledgeBase.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Themes", (string)null);
                });

            modelBuilder.Entity("emma.ml.chatbot.api.Entities.KnowledgeBase.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("ThemeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ThemeId", "Name")
                        .IsUnique();

                    b.ToTable("Topics", (string)null);
                });

            modelBuilder.Entity("emma.ml.chatbot.api.Entities.SeederHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExecutedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SeederName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("SeederName")
                        .IsUnique();

                    b.ToTable("SeederHistories", (string)null);
                });

            modelBuilder.Entity("emma.ml.chatbot.api.Entities.Chat.Conversation", b =>
                {
                    b.HasOne("emma.ml.chatbot.api.Entities.Chat.Participant", "CurrentRepresentative")
                        .WithMany()
                        .HasForeignKey("CurrentRepresentativeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CurrentRepresentative");
                });

            modelBuilder.Entity("emma.ml.chatbot.api.Entities.Chat.ConversationParticipant", b =>
                {
                    b.HasOne("emma.ml.chatbot.api.Entities.Chat.Conversation", "Conversation")
                        .WithMany("ConversationParticipants")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("emma.ml.chatbot.api.Entities.Chat.Participant", "Participant")
                        .WithMany("ConversationParticipants")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("emma.ml.chatbot.api.Entities.Chat.Message", b =>
                {
                    b.HasOne("emma.ml.chatbot.api.Entities.Chat.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("emma.ml.chatbot.api.Entities.Chat.Participant", "Participant")
                        .WithMany("Messages")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("emma.ml.chatbot.api.Entities.KnowledgeBase.Entry", b =>
                {
                    b.HasOne("emma.ml.chatbot.api.Entities.KnowledgeBase.Topic", "Topic")
                        .WithMany("Entries")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("emma.ml.chatbot.api.Entities.KnowledgeBase.Topic", b =>
                {
                    b.HasOne("emma.ml.chatbot.api.Entities.KnowledgeBase.Theme", "Theme")
                        .WithMany("Topics")
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("emma.ml.chatbot.api.Entities.Chat.Conversation", b =>
                {
                    b.Navigation("ConversationParticipants");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("emma.ml.chatbot.api.Entities.Chat.Participant", b =>
                {
                    b.Navigation("ConversationParticipants");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("emma.ml.chatbot.api.Entities.KnowledgeBase.Theme", b =>
                {
                    b.Navigation("Topics");
                });

            modelBuilder.Entity("emma.ml.chatbot.api.Entities.KnowledgeBase.Topic", b =>
                {
                    b.Navigation("Entries");
                });
#pragma warning restore 612, 618
        }
    }
}
